(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{701:function(t,a,s){"use strict";s.r(a);var e=s(68),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("Docker 技术发展为微服务落地提供了更加便利的环境，使用 Docker 部署 Spring Boot 其实非常简单，这篇文章我们就来简单学习下。")]),t._v(" "),s("p",[t._v("首先构建一个简单的 Spring Boot 项目，然后给项目添加 Docker 支持，最后对项目进行部署。")]),t._v(" "),s("h2",{attrs:{id:"一个简单-spring-boot-项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个简单-spring-boot-项目"}},[t._v("#")]),t._v(" 一个简单 Spring Boot 项目")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("pom.xml")]),t._v(" 中 ，使用 Spring Boot 2.0 相关依赖")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("parent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-parent"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("2.0.0.RELEASE"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("parent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("添加 web 和测试依赖")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependencies")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-web"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-test"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scope")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("test"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("scope")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependencies")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("创建一个 DockerController，在其中有一个"),s("code",[t._v("index()")]),t._v("方法，访问时返回："),s("code",[t._v("Hello Docker!")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('@RestController\npublic class DockerController {\n\n    @RequestMapping("/")\n    public String index() {\n        return "Hello Docker!";\n    }\n}\n')])])]),s("p",[t._v("启动类")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("@SpringBootApplication\npublic class DockerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DockerApplication.class, args);\n    }\n}\n")])])]),s("p",[t._v("添加完毕后启动项目，启动成功后浏览器放问："),s("code",[t._v("http://localhost:8080/")]),t._v("，页面返回："),s("code",[t._v("Hello Docker!")]),t._v("，说明 Spring Boot 项目配置正常。")]),t._v(" "),s("h2",{attrs:{id:"spring-boot-项目添加-docker-支持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-项目添加-docker-支持"}},[t._v("#")]),t._v(" Spring Boot 项目添加 Docker 支持")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("pom.xml-properties")]),t._v("中添加 Docker 镜像名称")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<properties>\n    <docker.image.prefix>springboot</docker.image.prefix>\n</properties>\n")])])]),s("p",[t._v("plugins 中添加 Docker 构建插件：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n        \x3c!-- Docker maven plugin --\x3e\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>docker-maven-plugin</artifactId>\n            <version>1.0.0</version>\n            <configuration>\n                <imageName>${docker.image.prefix}/${project.artifactId}</imageName>\n                <dockerDirectory>src/main/docker</dockerDirectory>\n                <resources>\n                    <resource>\n                        <targetPath>/</targetPath>\n                        <directory>${project.build.directory}</directory>\n                        <include>${project.build.finalName}.jar</include>\n                    </resource>\n                </resources>\n            </configuration>\n        </plugin>\n        \x3c!-- Docker maven plugin --\x3e\n    </plugins>\n</build>\n")])])]),s("p",[t._v("在目录"),s("code",[t._v("src/main/docker")]),t._v("下创建 Dockerfile 文件，Dockerfile 文件用来说明如何来构建镜像。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('FROM openjdk:8-jdk-alpine\nVOLUME /tmp\nADD spring-boot-docker-1.0.jar app.jar\nENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]\n')])])]),s("p",[t._v("这个 Dockerfile 文件很简单，构建 Jdk 基础环境，添加 Spring Boot Jar 到镜像中，简单解释一下:")]),t._v(" "),s("ul",[s("li",[t._v("FROM ，表示使用 Jdk8 环境 为基础镜像，如果镜像不是本地的会从 DockerHub 进行下载")]),t._v(" "),s("li",[t._v("VOLUME ，VOLUME 指向了一个"),s("code",[t._v("/tmp")]),t._v("的目录，由于 Spring Boot 使用内置的 Tomcat 容器，Tomcat 默认使用"),s("code",[t._v("/tmp")]),t._v("作为工作目录。这个命令的效果是：在宿主机的"),s("code",[t._v("/var/lib/docker")]),t._v("目录下创建一个临时文件并把它链接到容器中的"),s("code",[t._v("/tmp")]),t._v("目录")]),t._v(" "),s("li",[t._v("ADD ，拷贝文件并且重命名")]),t._v(" "),s("li",[t._v("ENTRYPOINT ，为了缩短 Tomcat 的启动时间，添加"),s("code",[t._v("java.security.egd")]),t._v("的系统属性指向"),s("code",[t._v("/dev/urandom")]),t._v("作为 ENTRYPOINT")])]),t._v(" "),s("blockquote",[s("p",[t._v("这样 Spring Boot 项目添加 Docker 依赖就完成了。")])]),t._v(" "),s("h2",{attrs:{id:"构建打包环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建打包环境"}},[t._v("#")]),t._v(" 构建打包环境")]),t._v(" "),s("p",[t._v("我们需要有一个 Docker 环境来打包 Spring Boot 项目，在 Windows 搭建 Docker 环境很麻烦，因此我这里以 Centos 7 为例。")]),t._v(" "),s("h3",{attrs:{id:"安装-docker-环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-docker-环境"}},[t._v("#")]),t._v(" 安装 Docker 环境")]),t._v(" "),s("p",[t._v("安装")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("yum install docker\n")])])]),s("p",[t._v("安装完成后，使用下面的命令来启动 docker 服务，并将其设置为开机启动：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ervice docker start\nchkconfig docker on\n\n#LCTT 译注：此处采用了旧式的 sysv 语法，如采用CentOS 7中支持的新式 systemd 语法，如下：\nsystemctl  start docker.service\nsystemctl  enable docker.service\n")])])]),s("p",[t._v("使用 Docker 中国加速器")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('vi  /etc/docker/daemon.json\n\n#添加后：\n{\n    "registry-mirrors": ["https://registry.docker-cn.com"],\n    "live-restore": true\n}\n')])])]),s("p",[t._v("重新启动 docker")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("systemctl restart docker\n")])])]),s("p",[t._v("输入"),s("code",[t._v("docker version")]),t._v(" 返回版本信息则安装正常。")]),t._v(" "),s("h3",{attrs:{id:"安装-jdk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-jdk"}},[t._v("#")]),t._v(" 安装 JDK")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("yum -y install java-1.8.0-openjdk*\n")])])]),s("p",[t._v("配置环境变量\n打开 "),s("code",[t._v("vim /etc/profile")]),t._v("\n添加一下内容")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-0.b14.el7_4.x86_64 \nexport PATH=$PATH:$JAVA_HOME/bin \n")])])]),s("p",[t._v("修改完成之后，使其生效")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("source /etc/profile\n")])])]),s("p",[t._v("输入"),s("code",[t._v("java -version")]),t._v(" 返回版本信息则安装正常。")]),t._v(" "),s("h3",{attrs:{id:"安装-maven"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-maven"}},[t._v("#")]),t._v(" 安装 MAVEN")]),t._v(" "),s("p",[t._v("下载："),s("code",[t._v("http://mirrors.shu.edu.cn/apache/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gz")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("## 解压\ntar vxf apache-maven-3.5.2-bin.tar.gz\n## 移动\nmv apache-maven-3.5.2 /usr/local/maven3\n")])])]),s("p",[t._v("修改环境变量， 在"),s("code",[t._v("/etc/profile")]),t._v("中添加以下几行")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("MAVEN_HOME=/usr/local/maven3\nexport MAVEN_HOME\nexport PATH=${PATH}:${MAVEN_HOME}/bin\n")])])]),s("p",[t._v("记得执行"),s("code",[t._v("source /etc/profile")]),t._v("使环境变量生效。")]),t._v(" "),s("p",[t._v("输入"),s("code",[t._v("mvn -version")]),t._v(" 返回版本信息则安装正常。")]),t._v(" "),s("blockquote",[s("p",[t._v("这样整个构建环境就配置完成了。")])]),t._v(" "),s("h2",{attrs:{id:"使用-docker-部署-spring-boot-项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-docker-部署-spring-boot-项目"}},[t._v("#")]),t._v(" 使用 Docker 部署 Spring Boot 项目")]),t._v(" "),s("p",[t._v("将项目 "),s("code",[t._v("spring-boot-docker")]),t._v(" 拷贝服务器中，进入项目路径下进行打包测试。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#打包\nmvn package\n#启动\njava -jar target/spring-boot-docker-1.0.jar\n")])])]),s("p",[t._v("看到 Spring Boot 的启动日志后表明环境配置没有问题，接下来我们使用 DockerFile 构建镜像。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("mvn package docker:build\n")])])]),s("p",[t._v("第一次构建可能有点慢，当看到以下内容的时候表明构建成功：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("...\nStep 1 : FROM openjdk:8-jdk-alpine\n ---\x3e 224765a6bdbe\nStep 2 : VOLUME /tmp\n ---\x3e Using cache\n ---\x3e b4e86cc8654e\nStep 3 : ADD spring-boot-docker-1.0.jar app.jar\n ---\x3e a20fe75963ab\nRemoving intermediate container 593ee5e1ea51\nStep 4 : ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar /app.jar\n ---\x3e Running in 85d558a10cd4\n ---\x3e 7102f08b5e95\nRemoving intermediate container 85d558a10cd4\nSuccessfully built 7102f08b5e95\n[INFO] Built springboot/spring-boot-docker\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 54.346 s\n[INFO] Finished at: 2018-03-13T16:20:15+08:00\n[INFO] Final Memory: 42M/182M\n[INFO] ------------------------------------------------------------------------\n")])])]),s("p",[t._v("使用"),s("code",[t._v("docker images")]),t._v("命令查看构建好的镜像：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("docker images\nREPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE\nspringboot/spring-boot-docker   latest              99ce9468da74        6 seconds ago       117.5 MB\n")])])]),s("p",[s("code",[t._v("springboot/spring-boot-docker")]),t._v(" 就是我们构建好的镜像，下一步就是运行该镜像")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("docker run -p 8080:8080 -t springboot/spring-boot-docker\n")])])]),s("p",[t._v("启动完成之后我们使用"),s("code",[t._v("docker ps")]),t._v("查看正在运行的镜像：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('docker ps\nCONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS              PORTS                    NAMES\n049570da86a9        springboot/spring-boot-docker   "java -Djava.security"   30 seconds ago      Up 27 seconds       0.0.0.0:8080->8080/tcp   determined_mahavira\n')])])]),s("p",[t._v("可以看到我们构建的容器正在在运行，访问浏览器："),s("code",[t._v("http://192.168.0.x:8080/")]),t._v(", 返回")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Hello Docker!\n")])])]),s("p",[t._v("说明使用 Docker 部署 Spring Boot 项目成功！")]),t._v(" "),s("p",[s("strong",[s("a",{attrs:{href:"https://github.com/ityouknow/spring-boot-examples",target:"_blank",rel:"noopener noreferrer"}},[t._v("示例代码 - github"),s("OutboundLink")],1)])]),t._v(" "),s("p",[s("strong",[s("a",{attrs:{href:"https://gitee.com/ityouknow/spring-boot-examples",target:"_blank",rel:"noopener noreferrer"}},[t._v("示例代码 - 码云"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://spring.io/guides/gs/spring-boot-docker/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Boot with Docker"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://lw900925.github.io/docker/docker-springboot.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker：Spring Boot 应用发布到 Docker"),s("OutboundLink")],1)]),t._v(" "),s("blockquote",[s("p",[t._v("本文由 "),s("a",{attrs:{href:"http://ksria.com/simpread/",target:"_blank",rel:"noopener noreferrer"}},[t._v("简悦 SimpRead"),s("OutboundLink")],1),t._v(" 转码")]),t._v(" "),s("p",[t._v("原文地址 https://www.cnblogs.com/ityouknow/p/8599093.html")])])])}),[],!1,null,null,null);a.default=n.exports}}]);