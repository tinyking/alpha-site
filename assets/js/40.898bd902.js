(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{694:function(a,v,_){"use strict";_.r(v);var t=_(68),i=Object(t.a)({},(function(){var a=this,v=a.$createElement,_=a._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"java-5"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java-5"}},[a._v("#")]),a._v(" Java 5")]),a._v(" "),_("ol",[_("li",[a._v("泛型Generics")]),a._v(" "),_("li",[a._v("枚举类型Enumeration")]),a._v(" "),_("li",[a._v("自动装箱（自动类型包装和解包）autoboxing & unboxing")]),a._v(" "),_("li",[a._v("可变参数varargs（varargs number of arguments）")]),a._v(" "),_("li",[a._v("Annotations")]),a._v(" "),_("li",[a._v("新的迭代语句")]),a._v(" "),_("li",[a._v("静态导入")]),a._v(" "),_("li",[a._v("新的格式化方法")]),a._v(" "),_("li",[a._v("新的线程模型和并发库")])]),a._v(" "),_("h1",{attrs:{id:"java-6"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java-6"}},[a._v("#")]),a._v(" Java 6")]),a._v(" "),_("ol",[_("li",[a._v("引入一个支持脚本引擎的新框架")]),a._v(" "),_("li",[a._v("UI的增强")]),a._v(" "),_("li",[a._v("对WebService支持的增强")]),a._v(" "),_("li",[a._v("一系列的安全相关的增强")]),a._v(" "),_("li",[a._v("JDBC 4.0")]),a._v(" "),_("li",[a._v("Compiler API")]),a._v(" "),_("li",[a._v("通用的Annotations支持")])]),a._v(" "),_("h1",{attrs:{id:"java-7"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java-7"}},[a._v("#")]),a._v(" Java 7")]),a._v(" "),_("ol",[_("li",[a._v("switch中可以使用字符串")]),a._v(" "),_("li",[a._v("泛型实例化类型自动推断")]),a._v(" "),_("li",[a._v("语法上支持集合，而不一定是数组")]),a._v(" "),_("li",[a._v("新增了一些取环境信息的工具方法")]),a._v(" "),_("li",[a._v("Boolean类型反转，空指针安全，参与为运算")]),a._v(" "),_("li",[a._v("两个char间的equals")]),a._v(" "),_("li",[a._v("安全的加减乘除")]),a._v(" "),_("li",[a._v("Map集合支持并发请求")])]),a._v(" "),_("h1",{attrs:{id:"java-8"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java-8"}},[a._v("#")]),a._v(" Java 8")]),a._v(" "),_("ol",[_("li",[_("p",[a._v("Lambda表达式")])]),a._v(" "),_("li",[_("p",[a._v("默认方法")])]),a._v(" "),_("li",[_("p",[a._v("静态方法")])]),a._v(" "),_("li",[_("p",[a._v("优化了HashMap以及ConcurrentHashMap\n将HashMap原来的数组+链表的结构优化成了数组+链表+红黑树的结构，减少了hash碰撞造成的链表长度过长，时间复杂度过高的问题，ConcurrentHashMap则改进了原先的分段锁的方式，采用transient volatile HashEntry<K,V>[] table来保存数据。")])]),a._v(" "),_("li",[_("p",[a._v("JVM\nPermGen空间被移除了，取而代之的是Metaspace。JVM选项-XX:PermSize与-XX:MaxPermSize分别被-XX:MetaSpaceSize与-XX:MaxMetaspaceSize所代替。")])]),a._v(" "),_("li",[_("p",[a._v("新增原子性操作类LongAdder")])]),a._v(" "),_("li",[_("p",[a._v("新增StampedLock")])])]),a._v(" "),_("h1",{attrs:{id:"java-9"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java-9"}},[a._v("#")]),a._v(" Java 9")]),a._v(" "),_("ol",[_("li",[a._v("jshell")]),a._v(" "),_("li",[a._v("私有接口方法")]),a._v(" "),_("li",[a._v("更改了HTTP调动的相关API")]),a._v(" "),_("li",[a._v("集合工厂方法")]),a._v(" "),_("li",[a._v("改进了Stream API")])])])}),[],!1,null,null,null);v.default=i.exports}}]);