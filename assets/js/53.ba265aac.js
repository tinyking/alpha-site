(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{691:function(t,a,e){"use strict";e.r(a);var s=e(68),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"annotation介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#annotation介绍"}},[t._v("#")]),t._v(" Annotation介绍")]),t._v(" "),e("hr"),t._v(" "),e("h1",{attrs:{id:"spring项目开发常用annotation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring项目开发常用annotation"}},[t._v("#")]),t._v(" Spring项目开发常用Annotation")]),t._v(" "),e("h2",{attrs:{id:"java"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[t._v("#")]),t._v(" Java")]),t._v(" "),e("h3",{attrs:{id:"resource"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#resource"}},[t._v("#")]),t._v(" @Resource")]),t._v(" "),e("p",[t._v("Resource 注释标记应用程序所需的资源。此注释可以应用于应用程序组件类，或者该组件类的字段或方法。如果将该注释应用于一个字段或方法，那么初始化应用程序组件时容器将把所请求资源的一个实例注入其中。如果将该注释应用于组件类，则该注释将声明一个应用程序在运行时将查找的资源。")]),t._v(" "),e("p",[t._v("即使此注释没有被标记为Inherited，部署工具仍然需要检查任意组件类的所有超类，以发现这些超类中所有使用此注释的地方。所有此类注释实例都指定了应用程序组件所需的资源。注意，此注释可能出现在超类的 private 字段和方法上；在这种情况下容器也需要执行注入操作。")]),t._v(" "),e("p",[t._v("在Spring中使用该注解，表示按name注入。")]),t._v(" "),e("h2",{attrs:{id:"spring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[t._v("#")]),t._v(" Spring")]),t._v(" "),e("h3",{attrs:{id:"required"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#required"}},[t._v("#")]),t._v(" @Required")]),t._v(" "),e("p",[t._v("此注解用于JavaBean的setter方法上，表示此属性是必须的，必须在配置阶段注入，否则会抛出"),e("code",[t._v("BeanInitializationException")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"autowired"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#autowired"}},[t._v("#")]),t._v(" @Autowired")]),t._v(" "),e("p",[t._v("此注解用于构造方法、字段、setter方法和注解类型。显示声明依赖，根据type来autowiring, 默认注入是必须的。")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CONSTRUCTOR"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FIELD"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("METHOD"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ANNOTATION_TYPE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RetentionPolicy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RUNTIME"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Autowired")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n\t * Declares whether the annotated dependency is required.\n\t * <p>Defaults to {@code true}.\n\t */")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("required")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("在构造方法上使用此注解时，需要注意的是，一个类只允许有一个构造方法使用此注解。==此外，在Spring4.3后，如果一个类仅仅只有一个构造方法，那么即使不使用此注解，spring也会自动注入相关的bean。==")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('@Componentpublic class User {\n    private Address address;\n    public User(Address address) {\n        this.address=address;     \n    }\n    \n}\n\n<bean id="user" class="xx.User"/>\n')])])]),e("h3",{attrs:{id:"qualifier"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#qualifier"}},[t._v("#")]),t._v(" @Qualifier")]),t._v(" "),e("p",[t._v("此注解是和"),e("code",[t._v("@Autowired")]),t._v("一起使用的。使用此注解可以让你对注入的过程有更多的控制，用@Qulifier指定要绑定的bean的名称。当一个type有多个bean时，使用@Autowired的时候需要配合上@Qulifier才能正常。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('@Componentpublic class User {\n    @Autowired    \n    @Qualifier("address1")    \n    private Address address;    \n    \n    ...\n    \n}\n')])])]),e("h3",{attrs:{id:"configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" @Configuration")]),t._v(" "),e("p",[t._v("此注解一般和@Configuration注解一起使用，指定Spring扫描注解的package。如果没有指定包，那么默认会扫描此配置类所在的package。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("@Configuartion\npublic class SpringCoreConfig {\n    @Bean    \n    public AdminUser adminUser() {\n        AdminUser adminUser = new AdminUser();\n        return adminUser;    \n        \n    }\n    \n}\n")])])]),e("h3",{attrs:{id:"lazy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lazy"}},[t._v("#")]),t._v(" @Lazy")]),t._v(" "),e("p",[t._v("此注解使用在Spring的组件类上。默认的，Spring中Bean的依赖一开始就被创建和配置。如果想要延迟初始化一个bean，那么可以在此类上使用Lazy注解，表示此bean只有在第一次被使用的时候才会被创建和初始化。此注解也可以使用在被@Configuration注解的类上，表示其中所有被@Bean注解的方法都会延迟初始化。")]),t._v(" "),e("h3",{attrs:{id:"value"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#value"}},[t._v("#")]),t._v(" @Value")]),t._v(" "),e("p",[t._v("此注解使用在字段、构造器参数和方法参数上。@Value可以指定属性取值的表达式，支持通过#{}使用SpringEL来取值，也支持使用${}来将属性来源中(Properties文件呢、本地环境变量、系统属性等)的值注入到bean的属性中。此注解的注入时发生在AutowiredAnnotationBeanPostProcessor中。")]),t._v(" "),e("h2",{attrs:{id:"stereotype注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stereotype注解"}},[t._v("#")]),t._v(" Stereotype注解")]),t._v(" "),e("h3",{attrs:{id:"component"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#component"}},[t._v("#")]),t._v(" @Component")]),t._v(" "),e("p",[t._v("此注解使用在class上来声明一个Spring组件(Bean), 将其加入到应用上下文中。")]),t._v(" "),e("h3",{attrs:{id:"controller"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#controller"}},[t._v("#")]),t._v(" @Controller")]),t._v(" "),e("p",[t._v("此注解使用在class上声明此类是一个Spring controller，是@Component注解的一种具体形式。")]),t._v(" "),e("h3",{attrs:{id:"service"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service"}},[t._v("#")]),t._v(" @Service")]),t._v(" "),e("p",[t._v("此注解使用在class上，声明此类是一个服务类，执行业务逻辑、计算、调用内部api等。是@Component注解的一种具体形式。")]),t._v(" "),e("h3",{attrs:{id:"repository"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#repository"}},[t._v("#")]),t._v(" @Repository")]),t._v(" "),e("p",[t._v("此类使用在class上声明此类用于访问数据库，一般作为DAO的角色。\n此注解有自动翻译的特性，例如：当此种component抛出了一个异常，那么会有一个handler来处理此异常，无需使用try-catch块。")]),t._v(" "),e("h2",{attrs:{id:"spring-boot注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot注解"}},[t._v("#")]),t._v(" Spring Boot注解")]),t._v(" "),e("h3",{attrs:{id:"enableautoconfiguration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#enableautoconfiguration"}},[t._v("#")]),t._v(" @EnableAutoConfiguration")]),t._v(" "),e("p",[t._v("此注解通常被用在主应用class上，告诉"),e("code",[t._v("Spring Boot")]),t._v(" 自动基于当前包添加Bean、对bean的属性进行设置等。")]),t._v(" "),e("h3",{attrs:{id:"springbootapplication"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springbootapplication"}},[t._v("#")]),t._v(" @SpringBootApplication")]),t._v(" "),e("p",[t._v("此注解用在Spring Boot项目的应用主类上（此类需要在base package中）。使用了此注解的类首先会让Spring Boot启动对base package下以及其sub-pacakages的类进行component scan。")]),t._v(" "),e("p",[t._v("此注解同时添加了以下几个注解：")]),t._v(" "),e("ul",[e("li",[t._v("@Configuration")]),t._v(" "),e("li",[t._v("@EnableAutoConfiguration")]),t._v(" "),e("li",[t._v("@ComponentScan")])]),t._v(" "),e("h2",{attrs:{id:"spring-mvc和rest注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc和rest注解"}},[t._v("#")]),t._v(" Spring MVC和REST注解")]),t._v(" "),e("h3",{attrs:{id:"controller-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#controller-2"}},[t._v("#")]),t._v(" @Controller")]),t._v(" "),e("p",[t._v("上述已经提到过此注解。")]),t._v(" "),e("h3",{attrs:{id:"requestmapping"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#requestmapping"}},[t._v("#")]),t._v(" @RequestMapping")]),t._v(" "),e("p",[t._v("此注解可以用在class和method上，用来映射web请求到某一个handler类或者handler方法上。当此注解用在Class上时，就创造了一个基础url，其所有的方法上的@RequestMapping都是在此url之上的。")]),t._v(" "),e("p",[t._v("可以使用其method属性来限制请求匹配的http method。")]),t._v(" "),e("p",[t._v("此外，Spring4.3之后引入了一系列@RequestMapping的变种。如下：c")]),t._v(" "),e("ul",[e("li",[t._v("@GetMapping")]),t._v(" "),e("li",[t._v("@PostMapping")]),t._v(" "),e("li",[t._v("@PutMapping")]),t._v(" "),e("li",[t._v("@PatchMapping")]),t._v(" "),e("li",[t._v("@DeleteMapping")])]),t._v(" "),e("p",[t._v("分别对应了相应method的RequestMapping配置。")]),t._v(" "),e("h3",{attrs:{id:"crossorigin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#crossorigin"}},[t._v("#")]),t._v(" @CrossOrigin")]),t._v(" "),e("p",[t._v("此注解用在class和method上用来支持跨域请求，是Spring 4.2后引入的。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('CrossOrigin(maxAge = 3600)\n@RestController\n@RequestMapping("/users")\npublic class AccountController {    \n    @CrossOrigin(origins = "http://xx.com")\n    @RequestMapping("/login")\n    public Result userLogin() {\n        // ...    \n        \n    }\n    \n}\n')])])]),e("h3",{attrs:{id:"exceptionhandler"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exceptionhandler"}},[t._v("#")]),t._v(" @ExceptionHandler")]),t._v(" "),e("p",[t._v("此注解使用在方法级别，声明对Exception的处理逻辑。可以指定目标Exception。")]),t._v(" "),e("h3",{attrs:{id:"initbinder"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#initbinder"}},[t._v("#")]),t._v(" @InitBinder")]),t._v(" "),e("p",[t._v("此注解使用在方法上，声明对WebDataBinder的初始化(绑定请求参数到JavaBean上的DataBinder)。在controller上使用此注解可以自定义请求参数的绑定。")]),t._v(" "),e("h3",{attrs:{id:"matrixvariable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#matrixvariable"}},[t._v("#")]),t._v(" @MatrixVariable")]),t._v(" "),e("p",[t._v("此注解使用在请求handler方法的参数上，Spring可以注入matrix url中相关的值。这里的矩阵变量可以出现在url中的任何地方，变量之间用;分隔。如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// GET /pets/42;q=11;r=22@RequestMapping(value = "/pets/{petId}")public void findPet(@PathVariable String petId, @MatrixVariable int q) {    // petId == 42    // q == 11}\n')])])]),e("p",[t._v("需要注意的是默认Spring mvc是不支持矩阵变量的，需要开启。")]),t._v(" "),e("div",{staticClass:"language-xml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("mvc:")]),t._v("annotation-driven")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("enable-matrix-variables")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("true"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),e("p",[t._v("注解配置则需要如下开启：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("@Configurationpublic class WebConfig extends WebMvcConfigurerAdapter {     @Override    public void configurePathMatch(PathMatchConfigurer configurer) {        UrlPathHelper urlPathHelper = new UrlPathHelper();        urlPathHelper.setRemoveSemicolonContent(false);        configurer.setUrlPathHelper(urlPathHelper);    }}\n")])])]),e("h3",{attrs:{id:"pathvariable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pathvariable"}},[t._v("#")]),t._v(" @PathVariable")]),t._v(" "),e("p",[t._v("此注解使用在请求handler方法的参数上。@RequestMapping可以定义动态路径，如:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('RequestMapping("/users/{uid}")\npublic String execute(@PathVariable("uid") String uid){\n}\n')])])]),e("h3",{attrs:{id:"requestattribute"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#requestattribute"}},[t._v("#")]),t._v(" @RequestAttribute")]),t._v(" "),e("p",[t._v("此注解用在请求handler方法的参数上，用于将web请求中的属性(requst attributes，是服务器放入的属性值)绑定到方法参数上。")]),t._v(" "),e("h3",{attrs:{id:"requestbody"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#requestbody"}},[t._v("#")]),t._v(" @RequestBody")]),t._v(" "),e("p",[t._v("此注解用在请求handler方法的参数上，用于将http请求的Body映射绑定到此参数上。HttpMessageConverter负责将对象转换为http请求。")]),t._v(" "),e("h3",{attrs:{id:"requestheader"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#requestheader"}},[t._v("#")]),t._v(" @RequestHeader")]),t._v(" "),e("p",[t._v("此注解用在请求handler方法的参数上，用于将http请求头部的值绑定到参数上。")]),t._v(" "),e("h3",{attrs:{id:"requestparam"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#requestparam"}},[t._v("#")]),t._v(" @RequestParam")]),t._v(" "),e("p",[t._v("此注解用在请求handler方法的参数上，用于将http请求参数的值绑定到参数上。")]),t._v(" "),e("h3",{attrs:{id:"requestpart"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#requestpart"}},[t._v("#")]),t._v(" @RequestPart")]),t._v(" "),e("p",[t._v("此注解用在请求handler方法的参数上，用于将文件之类的multipart绑定到参数上。")]),t._v(" "),e("h3",{attrs:{id:"responsebody"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#responsebody"}},[t._v("#")]),t._v(" @ResponseBody")]),t._v(" "),e("p",[t._v("此注解用在请求handler方法上。和@RequestBody作用类似，用于将方法的返回对象直接输出到http响应中。")]),t._v(" "),e("h3",{attrs:{id:"responsestatus"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#responsestatus"}},[t._v("#")]),t._v(" @ResponseStatus")]),t._v(" "),e("p",[t._v("此注解用于方法和exception类上，声明此方法或者异常类返回的http状态码。可以在Controller上使用此注解，这样所有的@RequestMapping都会继承。")]),t._v(" "),e("h3",{attrs:{id:"controlleradvice"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#controlleradvice"}},[t._v("#")]),t._v(" @ControllerAdvice")]),t._v(" "),e("p",[t._v("此注解用于class上。前面说过可以对每一个controller声明一个ExceptionMethod。这里可以使用@ControllerAdvice来声明一个类来统一对所有@RequestMapping方法来做@ExceptionHandler, @InitBinder, and @ModelAttribute处理。")]),t._v(" "),e("h3",{attrs:{id:"restcontroller"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#restcontroller"}},[t._v("#")]),t._v(" @RestController")]),t._v(" "),e("p",[t._v("此注解用于class上，声明此controller返回的不是一个视图而是一个领域对象。其同时引入了@Controller and @ResponseBody两个注解。")]),t._v(" "),e("h3",{attrs:{id:"restcontrolleradvice"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#restcontrolleradvice"}},[t._v("#")]),t._v(" @RestControllerAdvice")]),t._v(" "),e("p",[t._v("此注解用于class上，同时引入了@ControllerAdvice and @ResponseBody两个注解。")]),t._v(" "),e("h3",{attrs:{id:"sessionattribute"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sessionattribute"}},[t._v("#")]),t._v(" @SessionAttribute")]),t._v(" "),e("p",[t._v("此注解用于方法的参数上，用于将session中的属性绑定到参数。")]),t._v(" "),e("h3",{attrs:{id:"sessionattributes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sessionattributes"}},[t._v("#")]),t._v(" @SessionAttributes")]),t._v(" "),e("p",[t._v("此注解用于type级别，用于将JavaBean对象存储到session中。一般和@ModelAttribute注解一起使用。如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('@ModelAttribute("user")\npublic PUser getUser() {}\n\n// controller和上面的代码在同一controller中\n@Controller\n@SessionAttributes(value = "user", types = {\n    User.class\n})\npublic class UserController {}\n')])])]),e("h2",{attrs:{id:"数据访问注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据访问注解"}},[t._v("#")]),t._v(" 数据访问注解")]),t._v(" "),e("h3",{attrs:{id:"transactional"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transactional"}},[t._v("#")]),t._v(" @Transactional")]),t._v(" "),e("p",[t._v("此注解使用在接口定义、接口中的方法、类定义或者类中的public方法上。需要注意的是此注解并不激活事务行为，它仅仅是一个元数据，会被一些运行时基础设施来消费。")]),t._v(" "),e("h2",{attrs:{id:"任务执行、调度注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#任务执行、调度注解"}},[t._v("#")]),t._v(" 任务执行、调度注解")]),t._v(" "),e("h3",{attrs:{id:"scheduled"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scheduled"}},[t._v("#")]),t._v(" @Scheduled")]),t._v(" "),e("p",[t._v("此注解使用在方法上，声明此方法被定时调度。使用了此注解的方法返回类型需要是Void，并且不能接受任何参数。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("@Scheduled(fixedDelay=1000)\npublic void schedule() {}\n\n@Scheduled(fixedRate=1000)\npublic void schedulg() {\n}\n")])])]),e("p",[t._v("第二个与第一个不同之处在于其不会等待上一次的任务执行结束。")]),t._v(" "),e("h3",{attrs:{id:"async"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async"}},[t._v("#")]),t._v(" @Async")]),t._v(" "),e("p",[t._v("此注解使用在方法上，声明此方法会在一个单独的线程中执行。不同于Scheduled注解，此注解可以接受参数。\n使用此注解的方法的返回类型可以是Void也可是返回值。但是返回值的类型必须是一个Future。")]),t._v(" "),e("h2",{attrs:{id:"测试注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试注解"}},[t._v("#")]),t._v(" 测试注解")]),t._v(" "),e("h3",{attrs:{id:"contextconfiguration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#contextconfiguration"}},[t._v("#")]),t._v(" @ContextConfiguration")]),t._v(" "),e("p",[t._v("此注解使用在Class上，声明测试使用的配置文件，此外，也可以指定加载上下文的类。")]),t._v(" "),e("p",[t._v("此注解一般需要搭配SpringJUnit4ClassRunner使用。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = SpringCoreConfig.class)\npublic class UserServiceTest {}\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);